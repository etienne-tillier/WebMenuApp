{"version":3,"sources":["Containers/ShowTv.js"],"names":["ShowTv","state","loading","backdrop_path","episode_run_time","first_air_date","genres","homepage","id","name","networks","number_of_episodes","number_of_seasons","original_language","overview","poster_path","status","type","vote_average","external_ids","videos","results","recommendations","credits","cast","modal","loadSingleMovie","_callee","data","C_xampp_htdocs_tmdb_clone_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","a","wrap","_context","prev","next","_this","toggleLoading","getSingleTv","sent","setState","Object","C_xampp_htdocs_tmdb_clone_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_2__","window","scroll","top","stop","toggleModal","this","props","match","params","prevProps","prevState","url","_this$state","trailer","find","video","lang","languageList","iso_639_1","_this$props$match$url","split","C_xampp_htdocs_tmdb_clone_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","document","title","concat","react__WEBPACK_IMPORTED_MODULE_8___default","createElement","className","_Components_UI_Grid__WEBPACK_IMPORTED_MODULE_11__","_Components_UI_Loader__WEBPACK_IMPORTED_MODULE_12__","react__WEBPACK_IMPORTED_MODULE_8__","_Components_Show_Header__WEBPACK_IMPORTED_MODULE_9__","poster","year","score","text","_Components_Show_Detail__WEBPACK_IMPORTED_MODULE_10__","casts","slice","social","releaseDate","language","english_name","episodeRuntime","Component"],"mappings":"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","file":"static/js/11.5c0ad8c1.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport Header from '../Components/Show/Header';\r\nimport Detail from '../Components/Show/Detail';\r\nimport { Container } from '../Components/UI/Grid';\r\nimport Loader from '../Components/UI/Loader';\r\n\r\nimport { getSingleTv } from '../helpers/api';\r\nimport { languageList } from '../shared/List';\r\n\r\nclass ShowTv extends Component {\r\n  state = {\r\n    loading: false,\r\n    backdrop_path: null,\r\n    episode_run_time: [],\r\n    first_air_date: '',\r\n    genres: [],\r\n    homepage: null,\r\n    id: null,\r\n    name: null,\r\n    networks: [],\r\n    number_of_episodes: null,\r\n    number_of_seasons: null,\r\n    original_language: 'en',\r\n    overview: null,\r\n    poster_path: null,\r\n    status: null,\r\n    type: null,\r\n    vote_average: null,\r\n    external_ids: {},\r\n    videos: {\r\n      results: [],\r\n    },\r\n    recommendations: {\r\n      results: [],\r\n    },\r\n    credits: {\r\n      cast: [],\r\n    },\r\n    modal: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { id } = this.props.match.params;\r\n    this.loadSingleMovie(id);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { id } = this.props.match.params;\r\n    if (prevProps.match.url !== this.props.match.url) {\r\n      this.loadSingleMovie(id);\r\n    }\r\n  }\r\n\r\n  loadSingleMovie = async id => {\r\n    this.toggleLoading();\r\n    const data = await getSingleTv(id);\r\n    this.setState({\r\n      ...this.state,\r\n      ...data,\r\n      loading: false,\r\n    });\r\n    window.scroll({\r\n      top: 0,\r\n    });\r\n  };\r\n\r\n  toggleLoading = () => {\r\n    this.setState({ loading: !this.state.loading });\r\n  };\r\n\r\n  toggleModal = () => {\r\n    this.setState({ modal: !this.state.modal });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      loading,\r\n      name,\r\n      poster_path,\r\n      first_air_date,\r\n      vote_average,\r\n      overview,\r\n      backdrop_path,\r\n      homepage,\r\n      external_ids,\r\n      status,\r\n      genres,\r\n      episode_run_time,\r\n      original_language,\r\n      type,\r\n      networks,\r\n      modal,\r\n    } = this.state;\r\n    const { cast } = this.state.credits;\r\n    const { results: recommendations } = this.state.recommendations;\r\n    const trailer = this.state.videos.results.find(\r\n      video => video.type === 'Trailer',\r\n    );\r\n    const lang = languageList.find(\r\n      lang => lang.iso_639_1 === original_language,\r\n    );\r\n    const [, url] = this.props.match.url.split('/');\r\n    document.title = `TMDB Clone ${name ? `| ${name}` : ''}`;\r\n    return (\r\n      <section className='section-show'>\r\n        {loading ? (\r\n          <Container>\r\n            <Loader type='show' />\r\n          </Container>\r\n        ) : (\r\n          <Fragment>\r\n            <Header\r\n              title={name}\r\n              poster={poster_path}\r\n              year={first_air_date}\r\n              score={vote_average}\r\n              trailer={trailer}\r\n              text={overview}\r\n              backdrop_path={backdrop_path}\r\n              modal={modal}\r\n              toggleModal={this.toggleModal}\r\n            />\r\n            <Detail\r\n              url={url}\r\n              title={name}\r\n              casts={cast.slice(0, 5)}\r\n              recommendations={recommendations}\r\n              homepage={homepage}\r\n              social={external_ids}\r\n              status={status}\r\n              releaseDate={first_air_date}\r\n              language={lang.english_name}\r\n              genres={genres}\r\n              episodeRuntime={episode_run_time}\r\n              type={type}\r\n              networks={networks}\r\n            />\r\n          </Fragment>\r\n        )}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShowTv;\r\n"],"sourceRoot":""}